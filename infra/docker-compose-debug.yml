version: '3.9'

services:
  db:
    image: postgres:13.10-alpine
    container_name: backend_db
    restart: unless-stopped
    volumes:
      - postgresql_volume:/var/lib/postgresql/data/
    env_file:
      - ./.env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h ${POSTGRES_HOST} -p ${POSTGRES_PORT} -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  wsgi:
    build:
      context: ../backend/
      dockerfile: Dockerfile_dev
      args:
        DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
    container_name: backend_wsgi
    restart: always
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - static_volume:/app/static/:rw
      - media_volume:/app/media/:rw
      - cache_pip_volume:/root/.cache/pip/:rw
      - cache_apt_volume:/var/cache/apt/archives/:rw
      - ../backend/:/app/:rw
    expose:
      - 8000
    env_file:
      - ./.env
    depends_on:
      db:
        condition: service_healthy

  asgi:
    build:
      context: ../backend/
      dockerfile: Dockerfile_dev
      args:
        DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
    container_name: backend_asgi
    restart: always
    command: uvicorn backend.asgi:application --host 0.0.0.0 --port 8080 --reload --log-level info
    volumes:
      - static_volume:/app/static/:rw
      - media_volume:/app/media/:rw
      - cache_pip_volume:/root/.cache/pip/:rw
      - cache_apt_volume:/var/cache/apt/archives/:rw
      - ../backend/:/app/:rw
    expose:
      - 8080
    env_file:
      - ./.env
    depends_on:
      - wsgi

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
      args:
        DOMAIN_NAME: ${DOMAIN_NAME}
        DEBUG: ${DEBUG}
    container_name: backend_nginx
    volumes:
      - static_volume:/var/html/static/:rw
      - media_volume:/var/html/media/:rw
    env_file:
      - ./.env
    ports:
      - "80:80"
    depends_on:
      - wsgi
      - asgi

volumes:
  static_volume:
  media_volume:
  postgresql_volume:
  cache_pip_volume:
  cache_apt_volume:
